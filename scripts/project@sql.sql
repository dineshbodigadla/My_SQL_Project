create  database pptdb;
USE pptdb;




-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


SHOW TABLES ;


-- 1.Customer Insights



-- How many unique customers have placed orders?

SELECT 
    COUNT(DISTINCT cust_id) AS count_of_customers
FROM
    orders;
    
-- Which customers have placed the highest number of orders?

select cust_name,highest_orders
from 
(select  c.cust_name,count(o.ord_id) as  highest_orders,
dense_rank() over (order by count(o.ord_id) desc) as rnk
from orders o 
join customers c 
on o.cust_id =c.cust_id
group by c.cust_id ) ranked
where rnk=1;

-- What is the total and average purchase value per customer ?

SELECT 
    c.cust_name,
    SUM(total_price) AS total_purchase,
    AVG(total_price) AS average_purchase
FROM
    customers c
        JOIN
    orders o ON c.cust_id = o.cust_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY o.cust_id ;

-- Who are the top 5 customers by total purchase amount? total_price

SELECT 
    c.cust_name,
    SUM(total_price) AS total_purchase
FROM
    customers c
        JOIN
    orders o ON c.cust_id = o.cust_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY o.cust_id 
order by total_purchase
limit 5;

-- How many products exist in each category?

SELECT 
    c.cat_name, COUNT(p.prod_id) AS count_of_products
FROM
    categories c
        LEFT JOIN
    products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id
ORDER BY count_of_products DESC;

-- What is the average price of products by category?

SELECT 
    c.cat_name, avg(p.price) AS avg_price
FROM
    categories c
        LEFT JOIN
    products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id,c.cat_name
ORDER BY avg_price DESC;

-- Which products have the highest total sales volume (by quantity)?

select prod_name, highest_total_sales 
from (
select p.prod_name,sum(od.quantity) as highest_total_sales ,
dense_rank() over (order by sum(od.quantity) desc) as rnk 
from  products p
join order_details od
on p.prod_id=od.prod_id
group by prod_name) ranked 
where rnk=1;

-- What is the total revenue generated by each product?

select p.prod_name, sum(od.total_price) as total_revenue
from  products p 
join order_details od 
on p.prod_id=od.prod_id
group by p.prod_name
order by total_revenue desc ;


-- How do product sales vary by category and supplier?
 
 SELECT 
    s.sup_name,
    c.cat_name,
    SUM(quantity) AS total_quantitiy,
    SUM(total_price) AS total_sales
FROM
    products p
        JOIN
    categories c ON p.cat_id = c.cat_id
        JOIN
    supplier s ON s.sup_id = p.sup_id
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_name , c.cat_name
ORDER BY total_sales DESC;
 
-- How many orders have been placed in total?

SELECT 
    COUNT(distinct ord_id) AS total_orders
FROM
    orders;
    
    -- What is the average value per order?
    
   SELECT 
    AVG(total_sales) AS average_per_order
FROM
    (SELECT 
        ord_id, SUM(total_price) AS total_sales
    FROM
        order_details
    GROUP BY ord_id) AS orders_sum;
    
    
    
-- On which dates were the most orders placed?

	select order_date,total_orders 
   from  (select order_date,count(ord_id) as total_orders,
   dense_rank() over( order by count(ord_id)  desc) as rnk
   from  orders
   group by order_date
    ) as ranked 
   where rnk=1;
   
   
-- What are the monthly trends in order volume and revenue?
   
SELECT 
    DATE_FORMAT(STR_TO_DATE(o.order_date, '%d/%m/%Y'),
            '%Y-%m') AS month_year,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.each_price * od.quantity) AS total_revenue
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
WHERE
    o.order_date IS NOT NULL
        AND STR_TO_DATE(o.order_date, '%d/%m/%Y') IS NOT NULL
GROUP BY DATE_FORMAT(STR_TO_DATE(o.order_date, '%d/%m/%Y'),
        '%Y-%m')
ORDER BY month_year;

  -- How do order patterns vary across weekdays and weekends?
  
  SELECT 
    CASE 
        WHEN DAYOFWEEK(o.order_date) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.each_price * od.quantity) AS total_revenue,
    ROUND(SUM(od.each_price * od.quantity) / COUNT(DISTINCT o.ord_id), 2) AS avg_order_value
FROM order_details od
JOIN orders o 
    ON o.ord_id = od.ord_id
WHERE o.order_date IS NOT NULL
GROUP BY day_type
ORDER BY day_type;

-- How many suppliers are there in the database?

 SELECT 
    COUNT(DISTINCT sup_id) AS total_no_suppliers
FROM
    supplier;
    
    -- Which supplier provides the most products?
    
    select sup_name ,total_products
    from 
    (select s.sup_name,count(p.prod_id) as total_products,
    dense_rank() over (order by count(p.prod_id) desc) as rnk
    from supplier s 
    join products p 
    on s.sup_id=p.sup_id
    group by s.sup_id) ranked 
    where rnk=1;
    
  -- What is the average price of products from each supplier?

SELECT 
    s.sup_name, AVG(p.price) AS average_price
FROM
    products p
        JOIN
    supplier s ON s.sup_id = p.sup_id
GROUP BY s.sup_name
ORDER BY average_price DESC;

-- Which suppliers contribute the most to total product sales (by revenue)?

 select sup_name,total_revenue
 from (
 select s.sup_name,sum(od.each_price * od.quantity) as total_revenue,
 DENSE_RANK() over(order by sum(od.each_price * od.quantity)  desc) as rnk
 from supplier s
 join products p
 on s.sup_id=p.sup_id
 join order_details od
 on od.prod_id=p.prod_id
 group by s.sup_name,s.sup_id)
 ranked 
 where rnk=1;
 
 -- How many employees have processed orders?
 
 SELECT 
    COUNT(DISTINCT emp_id) AS employees_count
FROM
    orders;



-- Which employees have handled the most orders?

select emp_name, total_orders 
from (select e.emp_name,count(o.ord_id) as total_orders,
dense_rank() over(order by count(o.ord_id) desc) as rnk 
from employees e
join orders o
on e.emp_id=o.emp_id 
group by o.emp_id )ranked 
where rnk=1;

-- What is the total sales value processed by each employee?

SELECT 
    emp_name, SUM(OD.total_price) AS total_sales
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON od.ord_id = o.ord_id
GROUP BY e.emp_id , e.emp_name
ORDER BY total_sales DESC;

-- What is the average order value handled per employee?


SELECT AVG(total_sales) as avg_order 
from (
SELECT 
    emp_name, SUM(OD.total_price) AS total_sales
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON od.ord_id = o.ord_id
GROUP BY e.emp_id , e.emp_name
) as employees_table;


-- What is the relationship between quantity ordered and total price?

SELECT 
    prod_id,
    SUM(quantity) AS total_quantity,
    SUM(each_price * quantity) AS total_price
FROM
    order_details
GROUP BY prod_id
ORDER BY total_price;

-- What is the average quantity ordered per product?

SELECT 
    p.prod_name, AVG(od.quantity) AS avg_quantity
FROM
    order_details od
        JOIN
    products p ON p.prod_id = od.prod_id
GROUP BY p.prod_id , prod_name
ORDER BY avg_quantity;



-- How does the unit price vary across products and orders?

 SELECT 
    p.prod_name,
    MIN(od.each_price) AS min_price,
    MAX(od.each_price) AS max_price,
    ROUND(AVG(od.each_price), 2) AS avg_price,
    COUNT(DISTINCT o.ord_id) AS total_orders
FROM
    orders o
        JOIN
    order_details od ON o.ord_id = od.ord_id
        JOIN
    products p ON p.prod_id = od.prod_id
GROUP BY p.prod_name
ORDER BY avg_price DESC;


